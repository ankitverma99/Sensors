#install sudo apt-get update
sudo apt-get install build-essential python-pip python-dev python-smbus git
git clone https://github.com/adafruit/Adafruit_Python_GPIO.git
cd Adafruit_Python_GPIO
sudo python setup.py install #

from Adafruit_BME280 import *

import MCP3008


class AQSensor:
   adc = None
   adcPin = 0

   def __init__(self, adc, adcNumber, r0=10000, pullup = 10000):
      self.adc = adc
      self.adcPin = adcNumber
      self.pullup = pullup
      self.r0 = r0

   def get_quality(self):
      result = float(self.adc.readADC(self.adcPin))
      if result == 0:
         resistance = 0
      else:
         vin = ((2**self.adc.ADCBITS) / 3.3) * 5
         resistance = (vin/result - 1)*self.pullup
      return resistance
def get_CO(self):
      conversions = [((110,90),(0,1.5)),((90,85),(1.5,5)),((85,80),(5,6)),((80,75),(6,7)),((75,70),(7,8)),((70,65),(8,12)),((65,60),(12,14)),((60,55),(14,18)),((55,50),(18,22))]
      rs = self.get_quality()
                rsper = 100*(float(rs)/self.r0)
                for a in conversions:
                        if a[0][0]>=rsper>a[0][1]:
                                mid,hi = rsper-a[0][0],a[0][1]-a[0][0]
                                sf = float(mid)/hi
                                ppm = sf * (a[1][1]-a[1][0]) + a[1][0]
                                return ppm
                if rsper>110:
         return 0
      else:
         return (1/float(rsper))*1100

sensor = BME280(mode=BME280_OSAMPLE_8)

degrees = sensor.read_temperature()
pascals = sensor.read_pressure()
hectopascals = pascals / 100
humidity = sensor.read_humidity()

print 'Timestamp = {0:0.3f}'.format(sensor.t_fine)
print 'Temp      = {0:0.3f} deg C'.format(degrees)
print 'Pressure  = {0:0.2f} hPa'.format(hectopascals)
print 'Humidity  = {0:0.2f} %'.format(humidity)